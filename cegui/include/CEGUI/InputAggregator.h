/***********************************************************************
    created:    10/7/2013
    author:     Timotei Dolean <timotei21@gmail.com>

    purpose:    Generates input events from injected input
*************************************************************************/
/***************************************************************************
 *   Copyright (C) 2004 - 2013 Paul D Turner & The CEGUI Development Team
 *
 *   Permission is hereby granted, free of charge, to any person obtaining
 *   a copy of this software and associated documentation files (the
 *   "Software"), to deal in the Software without restriction, including
 *   without limitation the rights to use, copy, modify, merge, publish,
 *   distribute, sublicense, and/or sell copies of the Software, and to
 *   permit persons to whom the Software is furnished to do so, subject to
 *   the following conditions:
 *
 *   The above copyright notice and this permission notice shall be
 *   included in all copies or substantial portions of the Software.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *   OTHER DEALINGS IN THE SOFTWARE.
 ***************************************************************************/
#ifndef _CEGUIInputAggregator_h_
#define _CEGUIInputAggregator_h_

#include "CEGUI/EventSet.h"
#include "CEGUI/InjectedInputReceiver.h"

#if defined (_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable : 4251)
#endif

namespace CEGUI
{
struct MouseClickTracker;

/*!
\brief
    Aggregates the input from multiple input devices and processes it to generate
    input events which are then fed to the (optional) \ref InputEventReceiver.
*/
class CEGUIEXPORT InputAggregator : public InjectedInputReceiver,
                                    public EventSet
{
public:

    /*!
    \brief
        Set whether automatic mouse button click and multi-click (i.e.
        double-click and treble-click) event generation will occur.

    \param enable
        - true to have mouse button click and multi-click events automatically
        generated by the system from the basic button up and down event
        injections.
        - false if no automatic generation of events should occur.  In this
        instance the user may wish to use the additional event injectors to
        manually inform the system of such events.
    */
    void setMouseClickEventGenerationEnabled(const bool enable);

    /*!
    \brief
        Return whether automatic mouse button click and multi-click (i.e.
        double-click and treble-click) event generation is enabled.

    \return
        - true if mouse button click and multi-click events will be
        automatically generated by the system from the basic button up and down
        event injections.
        - false if no automatic generation of events will occur.  In this
        instance the user may wish to use the additional event injectors to
        manually inform the system of such events.
    */
    bool isMouseClickEventGenerationEnabled() const;

    void setMouseButtonMultiClickTimeout(float seconds);
    float getMouseButtonMultiClickTimeout() const;

    /*!
    \brief
        Sets the mouse multi-click tolerance size

    \param sz
        The size of the tolerance in percent of the display's size
    */
    void setMouseButtonMultiClickTolerance(const Sizef& sz);

    /*!
    \brief
        Returns the mouse multi-click tolerance size

    \return
        A size structure with the zone's width and height in percent of the
        display's size
    */
    const Sizef& getMouseButtonMultiClickTolerance() const;
    
    /*!
    \brief
        Sets the status of modifier keys to the specified values.

        Call this before injectKeyDown if InputAggregator is set to handle
        actions on keydown.
     */
    void setModifierKeys(bool shift_down, bool alt_down, bool ctrl_down);

protected:

    //! Timeout used when detecting multi-click events.
    float d_mouseButtonMultiClickTimeout;
    //! Movement tolerance (percent) used when detecting multi-click events.
    Sizef d_mouseButtonMultiClickTolerance;
    //! Movement tolerance (absolute) used when detecting multi-click events.
    Sizef d_mouseButtonMultiClickAbsoluteTolerance;
    //! should mouse click/multi-click events be automatically generated.
    bool d_generateMouseClickEvents;

    glm::vec2 d_pointerPosition;
    //! Mapping from a key to its semantic value
    SemanticValue d_keyValuesMappings[UCHAR_MAX]; 
};

} // End of  CEGUI namespace section

#if defined (_MSC_VER)
#   pragma warning(pop)
#endif

#endif  // end of guard _CEGUIInputEvents_h_
